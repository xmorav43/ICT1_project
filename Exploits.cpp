#include "Exploits.h"
#include "Hadanky.h"
#include "Prvky.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <Windows.h>

int hodnoty[] = { 22,1021,642,315,4617,929,63,115,551 };
boolean uspel = FALSE;
int pokus = 1;
int bufferoOverFlow(int Zivoty)
{
	char bonusovaNapoveda[] = "md szf(itgr)";//TODO dopsat napovedu pro dalsi hadanku
	char Pribeh[] = "Probudil jsi se v male bile mistnosti a vidis pouze kovove dvere a vedle nich zarizeni pripominajici display.\n"
					"Po priblizeni vidis, ze to je pristupovy panel, ktery po tobe vyzaduje Jmeno a  ciselne Heslo.\n"
					"Avsak po zkousce jmena Admin, jsi byl odmitnut s hlaskou: \"spatne heslo\".\n"
					"A to i presto, ze jsi heslo nezadal. Nad panelem vsak vidis podivnou sekvenci cisel a obrazce ve tvaru trojuhelniku.\n"
					"Vypada to, ze to ma neco spolecneho s pristupovym panelem.";
	pokus = 1;
	char* gets(char*);
	struct
	{
		char Jmeno[15];
		volatile double Heslo;

	}Uzivatel;
	system("cls");
	postupnyVypis(Pribeh,25);
	while (Zivoty != 0 && !uspel)
	{	
		Uzivatel.Heslo = 0;
		system("cls");
		printf(Pribeh);
		printf("[Zivoty: %d\t Pokus: %d]\n", Zivoty, pokus);
		printf("\n\n5-6-33-66-666 7-2-8-66-2-222-8\n");
		Trojuhelniky();
		printf("\n\nJmeno:  ");
		
		gets(Uzivatel.Jmeno);
		if (Uzivatel.Heslo != 0) {
			if (Uzivatel.Heslo == 1.064992243035e-312) { //porovnani pretecene hodnoty s pozadovanou hodnotou
				uspel = TRUE;
			}
		}
		else {
			Zivoty--;
			pokus++;
		}

	}
	Pokus(pokus, bonusovaNapoveda);
	return Zivoty;
}
int integerOverFlow(int Zivoty)
{	
	char bonusovaNapoveda[] = "zcccpzpcc";//TODO dopsat napovedu pro dalsi hadanku
	char Pribeh1[] = "Dvere se pomalu otviraji a pres tvorici se skviru prochazi oslnujici bile svetlo.\n"
					"Se zavrenymi oci a rukou pred nimi prochazis dvermi. Kdyz jsi konecne na druhe strane,\n"
				    "tak zjistujes, ze jsi jen v dalsi mistnosti. U prostred stoji stul se zabudovanym diplayem,\n"
					"na kterem je zobrazena pouze jednoducha rovnice [w]*[x]*[y]*[z]=[v]. Krom stolu jsou v mistnosti svetla,\n"
					"ktera asi souvisi s rovnici. Pokazde kdyz si zadal nejaka cisla tak se svetla zacala rozsvicovat.\n"
					"Jejich funkcnost je vsak zrejme nahodna, jelikoz nekdy se rozsvitila cast a nekdy se rozsvitili\n"
					"az do konce zhasli a rozsvitili se znovu. Pak zde byli pohazene papiry, ale text na nich nedaval smysl,\n"
					"vypadal jako by byl casti nejakeho celku. Mozaiky, kterou slo precist pouze nad zdrojem svetla.\n"
					"Okamzite jsi tedy listy papiru poskladal nad displeyem. Vysledkem byly dalsi hadanky 1-2-1, 157 a tabulka cisel.\n";
	uspel = FALSE;
	pokus = 1;
	int w = 0, x = 0, y = 0, z = 0;
	unsigned int vysledek = 0;
	system("cls");
	postupnyVypis(Pribeh1, 25);
	printf("[Zivoty: %d\t Pokus: %d]\n", Zivoty, pokus);
	while (!uspel && Zivoty != 0) {
		system("cls");
		printf(Pribeh1);
		printf("[Zivoty: %d\t Pokus: %d]\n", Zivoty, pokus);
		printf("#####################\n"
			   "|  %d  | %d | %d |\n"
			   "| %d  | %d | %d |\n"
			   "|  %d  |  %d  | %d |\n"
			   "#####################\n", hodnoty[0], hodnoty[1], hodnoty[2], hodnoty[3], hodnoty[4], hodnoty[5], hodnoty[6], hodnoty[7], hodnoty[8]);
		//int w = 315, x = 115, y = 929, z = 1021;
		w = Vstup(1);
		x = Vstup(2);
		y = Vstup(3);
		z = Vstup(4);
		vysledek = w * x * y * z;
		if (vysledek == 157) {
			printf("\nPodaril se vam nastavit vstupni kod");
			uspel = TRUE;
		}
		else {
			Zivoty--;
			pokus++;
			
		}
	}
	while (getchar() != '\n');
	Pokus(pokus, bonusovaNapoveda);
	return Zivoty;
}
int formatString(int Zivoty)
{	
	char bonusovaNapoveda[] = "Posloupnost";//TODO dopsat napovedu pro dalsi hadanku
	char Pribeh2[] = "Uslysel jsi vrznuti a stul se dal do pohybu a odkryl tajne schodiste.\n"
					"Jak to tak vypada je to dalsi mozna cesta jak odstud ven.\n"
					"Schodiste bylo tocite, tmave a jeho steny se stale zuzovaly.\n"
					"Myslel jsi, ze uz dal neprojdes, kdyz v ten moment jsi dosel k chodbe a v dali jsi uvidel svetlo.\n"
					"Vydal jsi se za nim, dral jsi se vsi rychlosti skrz uzkou temnou chodbu, jen aby jsi zjistil,\n"
					"ze to neni cesta ven, ale jen cesta k dalsi prekazce. Mistnost ma steny popsane slovy v divnych formatech\n"
					"pR1nTf, feKT, 8eZepcN05t, ... Dohromady jsi napocital tricetdva ruznych slov a deset rad 0 a 1.\n"
					"Po sepsani jsi ziskal tabulku nejspis zakodovanych slov, ale co znamenaji a k cemu jsou je zatim nejasne.\n"
					"Jedine co ti je jasne, je ze se nachazis v nejakem testu, jelikoz je vse temer stejne jako v ostatnich mistnostech,\n"
					"jen jsou jine testy.\n";
	uspel = FALSE;
	pokus = 1;
	struct {
		char Jmeno[32];
		volatile double Prava;
	} Uzivatel;
	char buffer[16];
	system("cls");
	postupnyVypis(Pribeh2, 25);
	
	while (!uspel && Zivoty != 0) {
		system("cls");
		printf(Pribeh2);
		ASCII();
		printf("\n[Zivoty: %d\t Pokus: %d]\n", Zivoty, pokus);
		printf("Odpoved:  ");
		do {
			fgets(buffer, sizeof(buffer) - 1, stdin);
		} while (buffer == NULL);
		Uzivatel.Prava = 0;
		sprintf(Uzivatel.Jmeno, buffer);
		if (Uzivatel.Prava == 0)
		{
			Zivoty--;
			pokus++;
		}
		else
		{	
			uspel = TRUE;
		}
	}
	Pokus(pokus, bonusovaNapoveda);
	return Zivoty;
}
int Heap(int Zivoty)
{
	char Pribeh3[] = "Uspesne jsi dokoncil dalsi test, ale radost se te nezmocnila. Vis totiz ze te ceka jen a pouze dalsi test.\n"
					"A mas pravdu, jen co ti probleskla tato myslenka hlavou, se zacali rozestupovat zdi,\n"
					"ktere odkryly dalsi mistnost. Mistonost stejna, jako ty pred ni. Je to dalsi test.\n"
					"Tve nadeji na unik to moc nepridalo, avsak ty i navzdory tomu jdes sebejiste v pred\n"
					"celit dalsi hadance a testu co na tebe ceka. Dosel jsi ke stolu a na nem byla halda pairu,\n"
					"pres kterou jsi se prvne musel dostat, aby jsi zjistil zadani nadchazejiciho testu.\n"
					"Na stole vidis obrazovku a na ni prehravajici se video. Na videu je balici linka,\n"
					"ktera vzdy posklada krabici, obrati aby pripadne vypadli nechtene casti a uvolnili misto,\n"
					"pak tam vlozi predmet a zasype ho penovymi kulickami dokud neprepadnou aby byla jistota naplneni,\n"
					"pote krabici zavira a zkotroluje zdali je do ni pristup.\n"
					"Pod videem jsou sekvence asi slov, ktera se nedesifrovala po prenosu.\n";
	uspel = FALSE;
	pokus = 1;
	char line[128];
	struct login {
		char name[15];
		int autentizace;
	};

	struct login* login = 0;
	char* service = NULL;
	system("cls");
	postupnyVypis(Pribeh3, 25);
	printf(	"[1001#000#111#010#1011#10#011#10#0]\n"
			"[1110#0100#1001#101#10#0011#011#01#11#0]\n"
			"[01#10#1001#1011#01#11#0] \"char*15\"\n"
			"[010#000#01#0#101#000#1011#10]\n");
	printf("[Zivoty: %d\t Pokus: %d]\n", Zivoty, pokus);
	while (Zivoty != 0 && !uspel) {

		printf("[ login = %p, service = %p ]\n", login, service);
		if (fgets(line, sizeof(line), stdin) == NULL) break;

		if (strncmp(line, "Poskladat", 9) == 0 || strncmp(line, "poskladat", 9) == 0) {
			login = malloc(sizeof(struct login));
			memset(login, 0, sizeof(struct login));
			if (strlen(line + 9) < 31) {
				strcpy(login->name, line + 9);
			}
		}
		if (strncmp(line, "Vyprazdnit", 10) == 0 || strncmp(line, "vyprazdnit", 10) == 0) {
			free(login);
		}
		if (strncmp(line, "Naplnit", 7) == 0 || strncmp(line, "naplnit", 7) == 0) {
			service = _strdup(line + 7);
		}
		if (strncmp(line, "Kontrola", 8) == 0 || strncmp(line, "kontrola", 8) == 0) {
			if (login && login->autentizace) {
				uspel = TRUE;
				printf("Byl vam povolen pristup.\n");
			}
			else {
				printf("Pristup odepren, zkuste znovu.\n");
				Zivoty--;
				printf("[Zivoty: %d\t Pokus: %d]\n", Zivoty, pokus);
				pokus++;
			}
		}
	}
	return Zivoty;
}
int Vstup(int poradi)
{
	int vstup = 0;
	boolean shoda = FALSE;
	printf("Zadejde %d. cislo: ", poradi);
	scanf("%d", &vstup);
	while (!shoda)
	{

		for (int i = 0; i <= sizeof(hodnoty); i++)
		{
			if (hodnoty[i] == vstup)
			{
				shoda = TRUE;
				break;
			}
		}
		if (!shoda)
		{
			printf("Zadejte validni hodnotu: ");
			scanf("%d", &vstup);
		}
	}
	return vstup;
}